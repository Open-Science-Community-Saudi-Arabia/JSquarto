{"title":"Usage","markdown":{"yaml":{"title":"Usage"},"headingText":"CLI arguments","headingAttr":{"id":"sec-usage","classes":[],"keyvalue":[]},"containsRefs":false,"markdown":"\nThis section provides an overview of the JSquarto tool and its usage, including the custom CLI arguments and configuration settings that can be leveraged to customize the documentation generation process.\n\n<hr>\nThe CLI arguments are used to customize the behavior of the JSquarto tool. These bespoke arguments enable you to tailor the documentation generation process to suit your specific requirements. By leveraging these arguments, you can enhance the efficiency and effectiveness of the documentation generation process, thereby streamlining your workflow and optimizing your documentation output.\n\nSome of the custom CLI arguments supported by JSquarto include:\n\n1. `source`: Specifies the directory containing the source files to be documented. These files can be can be written in various languages supported by JSquarto, such as JavaScript, TypeScript, and JSX. By default, JSquarto will check for the `docs/source` directory within your project structure to locate these the source file. However, you possess the flexibility to specify an alternative directory through the `source` option.\n\n2. `tutorial`: Specifies the directory containing the tutorial files to be included in the documentation. This argument allows you to incorporate tutorial content into your documentation, providing additional context and guidance for users. \n\n3. `output`: Specifies the output directory where the generated documentation will be stored. By default, JSquarto will save the documentation in the `docs` directory within your project structure. However, you can customize the output location by specifying an alternative directory through the `output` option.\n\n4. `languages`: Specifies the languages to be supported in the documentation. This argument enables you to generate documentation in multiple languages, catering to a diverse user base. For example, `languages=en,fr,es` specifies English, French, and Spanish as the supported languages.\n\n5. `include_localized_versions`: Specifies whether to include localized versions of the generated documentation. For example, if specified, JSquarto will generate seperate files for each specified language. \n\n### Configuration\n<hr>\nThe `config.json` file in the root directory of the project is used to store the configuration settings for the JSquarto tool. This file contains the default settings for the documentation generation process, such as the source files directory, tutorial files directory, output directory, and supported languages. This config file can come in handy when you want to persist your settings for a particular project. You can modify these settings to customize the documentation generation process according to your preferences. \n\nBelow is an example of the `config.json` file:\n```json\n{\n    \"includeLocalizedVersions\": false,\n    \"outputDirectory\": \"docs/output\",\n    \"sourceDirectory\": \"docs/source\",\n    \"tutorialDirectory\": \"docs/tutorials\",\n    \"languages\": [\"en\", \"ar\"],\n    \"translationsDirectory\": \"dosc/translations\"\n}\n```\n\nIt contains the following fields:\n\n1. `sourceDirectory`: Specifies the directory containing the source files to be documented. By default, this field is set to `docs/source` within the project structure. This is the same as the `source` CLI argument.\n\n2. `tutorialDirectory`: Specifies the directory containing the tutorial files to be included in the documentation. By default, this field is set to `docs/tutorials` within the project structure. This is the same as the `tutorial` CLI argument.\n\n3. `outputDirectory`: Specifies the output directory where the generated documentation will be stored. By default, this field is set to `docs/output` within the project structure. This is the same as the `output` CLI argument.\n\n\n### Basic Usage {#sec-basic-usage}\n<hr>\nTo utilize these custom CLI arguments, simply append them to the JSquarto command when executing the tool. For example:\n\nTo specify the source files directory:\n```bash\njsq doc:generate source=/path/to/your/source/files \n```\n\nTo specify the tutorial files directory:\n```bash\njsq doc:generate tutorial=/path/to/your/tutorial/files\n```\n\nTo specify the output directory:\n```bash\njsq doc:generate output=/path/to/your/output/directory\n```\n\nTo specify the supported languages:\n```bash\njsq doc:generate languages=en,fr,es\n```\nThis will only add the languages to the config file (_quarto.yml) and not generate the documentation in the specified languages. This is important for cases where an external tool like Crowdin will be used to translate the documentation and generate the files in the specified languages.\n\nTo include localized versions of the generated documentation:\n```bash\njsq doc:generate include_localized_versions=true languages=en,fr,es\n```\nThis will generate the documentation in the specified languages and also add the languages to the config file (_quarto.yml).\n\nNote: If you intend to `include_localized_versions`, you must also specify the `languages` argument to indicate the supported languages for the documentation.\n\n### Usage with Configuration File {#sec-config-usage}\n<hr>\nAlternatively, you can leverage the `config.json` file to store your custom settings and avoid specifying them each time you run the JSquarto tool. By modifying the fields in the `config.json` file, you can customize the documentation generation process according to your requirements.\n\nTo use a configuration file follow the steps below:\n\n1. Initialize the configuration file using the command below:\n\n   ```bash\n   jsq config:init  \n   ```\n    This will create a `config.json` file in the `.jsquarto` directory within your project structure. You might have an already existing config file, for this case you can tell jsq to use this file instead by running;\n    \n   ```bash\n   jsq config:set config=/path/to/your/directory\n   ```\n\n2. Set the desired configuration settings in the `config.json` file according to your preferences.</br>\n   To set the source files directory run\n   ```bash\n   jsq config:set source=/path/to/your/source/files\n   ```\n\n   To set the tutorial files directory run\n   ```bash\n   jsq config:set tutorial=/path/to/your/tutorial/files\n   ```\n\n   To set the output directory run\n   ```bash\n   jsq config:set output=/path/to/your/output/directory\n   ```\n   To set the supported languages run\n   ```bash\n   jsq config:set languages=en,fr,es\n   ```\n\n   To include localized versions of the generated documentation run\n   ```bash\n   jsq config:set include_localized_versions=true\n   ```\n\nThis will update the `config.json` file with the specified settings, which will be used by the JSquarto tool during the documentation generation process.\n\nYou can also manually edit the `config.json` file to modify the configuration settings according to your requirements.\n\n#### \n::: {.notes}\n**Note:**\n- After initializing a config file the default configuration will be added to the file. You can then modify the settings in the file to suit your needs.\n\n- Your `config.json` file location will be stored by jsquarto in cache, so you don't have to specify the file location each time you run jsquarto. It is stored together with your project directory (the directory where `jsq` command is run).\n\n- Even when you have multiple projects, jsquarto will store the config file location for each project separately. This means that you can have different config files for different projects.\n\n- If you already initialized a config file for project, and you want to use a different config file for the same project, you can run the command below:\n\n    ```bash\n    jsq config:set config=/path/to/your/directory force\n    ```\n    This will update the config file location for the project.\n:::\n\n### Leveraging TypeScript in Source Files\n<hr>\nWhen utilizing TypeScript within your project, it's advisable to transpile your TypeScript source files into JavaScript before initiating the JSquarto process. This recommendation stems from the fact that JSquarto lacks intrinsic support for TypeScript syntax. Once you've transpiled your TypeScript files into JavaScript, you can seamlessly execute JSquarto on the resultant JavaScript files to generate comprehensive documentation.\n\nIntegrating TypeScript Transpilation\nPrior to executing JSquarto, ensure to transpile your TypeScript source files into JavaScript using your preferred transpiler, such as TypeScript Compiler (tsc). This step ensures compatibility with JSquarto's documentation generation process, thereby facilitating a smooth and efficient \n","srcMarkdownNoYaml":"\nThis section provides an overview of the JSquarto tool and its usage, including the custom CLI arguments and configuration settings that can be leveraged to customize the documentation generation process.\n\n### CLI arguments {#sec-usage}\n<hr>\nThe CLI arguments are used to customize the behavior of the JSquarto tool. These bespoke arguments enable you to tailor the documentation generation process to suit your specific requirements. By leveraging these arguments, you can enhance the efficiency and effectiveness of the documentation generation process, thereby streamlining your workflow and optimizing your documentation output.\n\nSome of the custom CLI arguments supported by JSquarto include:\n\n1. `source`: Specifies the directory containing the source files to be documented. These files can be can be written in various languages supported by JSquarto, such as JavaScript, TypeScript, and JSX. By default, JSquarto will check for the `docs/source` directory within your project structure to locate these the source file. However, you possess the flexibility to specify an alternative directory through the `source` option.\n\n2. `tutorial`: Specifies the directory containing the tutorial files to be included in the documentation. This argument allows you to incorporate tutorial content into your documentation, providing additional context and guidance for users. \n\n3. `output`: Specifies the output directory where the generated documentation will be stored. By default, JSquarto will save the documentation in the `docs` directory within your project structure. However, you can customize the output location by specifying an alternative directory through the `output` option.\n\n4. `languages`: Specifies the languages to be supported in the documentation. This argument enables you to generate documentation in multiple languages, catering to a diverse user base. For example, `languages=en,fr,es` specifies English, French, and Spanish as the supported languages.\n\n5. `include_localized_versions`: Specifies whether to include localized versions of the generated documentation. For example, if specified, JSquarto will generate seperate files for each specified language. \n\n### Configuration\n<hr>\nThe `config.json` file in the root directory of the project is used to store the configuration settings for the JSquarto tool. This file contains the default settings for the documentation generation process, such as the source files directory, tutorial files directory, output directory, and supported languages. This config file can come in handy when you want to persist your settings for a particular project. You can modify these settings to customize the documentation generation process according to your preferences. \n\nBelow is an example of the `config.json` file:\n```json\n{\n    \"includeLocalizedVersions\": false,\n    \"outputDirectory\": \"docs/output\",\n    \"sourceDirectory\": \"docs/source\",\n    \"tutorialDirectory\": \"docs/tutorials\",\n    \"languages\": [\"en\", \"ar\"],\n    \"translationsDirectory\": \"dosc/translations\"\n}\n```\n\nIt contains the following fields:\n\n1. `sourceDirectory`: Specifies the directory containing the source files to be documented. By default, this field is set to `docs/source` within the project structure. This is the same as the `source` CLI argument.\n\n2. `tutorialDirectory`: Specifies the directory containing the tutorial files to be included in the documentation. By default, this field is set to `docs/tutorials` within the project structure. This is the same as the `tutorial` CLI argument.\n\n3. `outputDirectory`: Specifies the output directory where the generated documentation will be stored. By default, this field is set to `docs/output` within the project structure. This is the same as the `output` CLI argument.\n\n\n### Basic Usage {#sec-basic-usage}\n<hr>\nTo utilize these custom CLI arguments, simply append them to the JSquarto command when executing the tool. For example:\n\nTo specify the source files directory:\n```bash\njsq doc:generate source=/path/to/your/source/files \n```\n\nTo specify the tutorial files directory:\n```bash\njsq doc:generate tutorial=/path/to/your/tutorial/files\n```\n\nTo specify the output directory:\n```bash\njsq doc:generate output=/path/to/your/output/directory\n```\n\nTo specify the supported languages:\n```bash\njsq doc:generate languages=en,fr,es\n```\nThis will only add the languages to the config file (_quarto.yml) and not generate the documentation in the specified languages. This is important for cases where an external tool like Crowdin will be used to translate the documentation and generate the files in the specified languages.\n\nTo include localized versions of the generated documentation:\n```bash\njsq doc:generate include_localized_versions=true languages=en,fr,es\n```\nThis will generate the documentation in the specified languages and also add the languages to the config file (_quarto.yml).\n\nNote: If you intend to `include_localized_versions`, you must also specify the `languages` argument to indicate the supported languages for the documentation.\n\n### Usage with Configuration File {#sec-config-usage}\n<hr>\nAlternatively, you can leverage the `config.json` file to store your custom settings and avoid specifying them each time you run the JSquarto tool. By modifying the fields in the `config.json` file, you can customize the documentation generation process according to your requirements.\n\nTo use a configuration file follow the steps below:\n\n1. Initialize the configuration file using the command below:\n\n   ```bash\n   jsq config:init  \n   ```\n    This will create a `config.json` file in the `.jsquarto` directory within your project structure. You might have an already existing config file, for this case you can tell jsq to use this file instead by running;\n    \n   ```bash\n   jsq config:set config=/path/to/your/directory\n   ```\n\n2. Set the desired configuration settings in the `config.json` file according to your preferences.</br>\n   To set the source files directory run\n   ```bash\n   jsq config:set source=/path/to/your/source/files\n   ```\n\n   To set the tutorial files directory run\n   ```bash\n   jsq config:set tutorial=/path/to/your/tutorial/files\n   ```\n\n   To set the output directory run\n   ```bash\n   jsq config:set output=/path/to/your/output/directory\n   ```\n   To set the supported languages run\n   ```bash\n   jsq config:set languages=en,fr,es\n   ```\n\n   To include localized versions of the generated documentation run\n   ```bash\n   jsq config:set include_localized_versions=true\n   ```\n\nThis will update the `config.json` file with the specified settings, which will be used by the JSquarto tool during the documentation generation process.\n\nYou can also manually edit the `config.json` file to modify the configuration settings according to your requirements.\n\n#### \n::: {.notes}\n**Note:**\n- After initializing a config file the default configuration will be added to the file. You can then modify the settings in the file to suit your needs.\n\n- Your `config.json` file location will be stored by jsquarto in cache, so you don't have to specify the file location each time you run jsquarto. It is stored together with your project directory (the directory where `jsq` command is run).\n\n- Even when you have multiple projects, jsquarto will store the config file location for each project separately. This means that you can have different config files for different projects.\n\n- If you already initialized a config file for project, and you want to use a different config file for the same project, you can run the command below:\n\n    ```bash\n    jsq config:set config=/path/to/your/directory force\n    ```\n    This will update the config file location for the project.\n:::\n\n### Leveraging TypeScript in Source Files\n<hr>\nWhen utilizing TypeScript within your project, it's advisable to transpile your TypeScript source files into JavaScript before initiating the JSquarto process. This recommendation stems from the fact that JSquarto lacks intrinsic support for TypeScript syntax. Once you've transpiled your TypeScript files into JavaScript, you can seamlessly execute JSquarto on the resultant JavaScript files to generate comprehensive documentation.\n\nIntegrating TypeScript Transpilation\nPrior to executing JSquarto, ensure to transpile your TypeScript source files into JavaScript using your preferred transpiler, such as TypeScript Compiler (tsc). This step ensures compatibility with JSquarto's documentation generation process, thereby facilitating a smooth and efficient \n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"number-sections":false,"output-file":"usage.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.52","babelquarto":{"languagecodes":[{"name":"en","text":"Version in en"},{"name":"ar","text":"Version in ar"}],"mainlanguage":"en","languages":["ar"]},"title-en":"Title in en","description-en":"Description in en","author-en":"Author in en","title-ar":"Title in ar","description-ar":"Description in ar","author-ar":"Author in ar","theme":"cosmo","highlight":"github","title":"Usage"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}