{"title":"Tutorial overview","markdown":{"yaml":{"title":"Tutorial overview"},"headingText":"Tutorials guide","containsRefs":false,"markdown":"\n<hr>\n\nThis section provides an overview of the `config.json` files used in the JSQuarto documentation, specifically focusing on the `tutorials` folder. The `config.json` file serve as configuration files that help structure and organize the documentation, while the `tutorials` folder contains the Markdown files for various tutorials.\n\n### The `tutorials` Folder\n<hr>\n\nThe `tutorials` folder within the documentation directory is dedicated to hosting tutorials on various topics related to the JSQuarto platform. This folder contains a collection of Markdown files, each representing an individual tutorial.\n\nMarkdown is a lightweight markup language that allows for easy formatting and structuring of text, making it ideal for creating tutorials. Markdown files provide a simple yet powerful way to document step-by-step instructions, code examples, explanations, and other relevant information.\n\nThe `tutorials` folder can be organized into subfolders to further categorize and group related tutorials. This helps users easily locate and access the tutorials they need based on their specific interests or requirements.\n\nBy structuring tutorials within the `tutorials` folder using Markdown, contributors can contribute new tutorials, update existing ones, and ensure that the documentation remains comprehensive and user-friendly.\n\nOverall, the combination of `.json` files and the `tutorials` folder enables a well-organized and accessible documentation structure, allowing users to navigate and explore the JSQuarto platform documentation with ease.\n\n### Overview of `config.json` Files\n<hr>\nThe `config.json` file in the JSQuarto documentation play a crucial role in organizing and categorizing the content. This file define the structure of the documentation and provide metadata for each section, tutorial, or topic. They allow maintainers and contributors to easily navigate and manage the documentation by specifying titles, creating nested structures, and linking related topics.\n\nBy using `config.json` file, the documentation can be dynamically generated and updated based on the defined structure. This makes it easier to maintain consistency, track changes, and add new content.\n\n\n### The `.json` configuration\n<hr>\nLet's explain how this structure works by looking at the `config.json` file in the `tutorials /` folder. This file defines the structure of the tutorials section of the documentation, including the titles, descriptions links for each tutorial.\n\n```json\n{\n  \"changelog\": {\n    \"title\": \"Changelog\"\n  },\n  \"environment_setup\": {\n    \"title\": \"Environment Setup\"\n  },\n  \"contributing\": {\n    \"title\": \"Contributing\"\n  }\n}\n```\n\nIn this example, the `.json` file defines the titles and relationships of the main sections within your documentation. The sections are represented as objects, with each object having a unique key and a `\"title\"` key-value pair.\n\n1. `changelog` represents the \"Changelog\" section. The `\"title\"` key-value pair specifies the title of this section as \"Changelog.\"\n\n2. `environment_setup` represents the \"Environment Setup\" section. The `\"title\"` key-value pair specifies the title of this section as \"Environment Setup.\"\n\n3. `contributing` represents the \"Contributing\" section. The `\"title\"` key-value pair specifies the title of this section as \"Contributing.\"\n\nWith this structure, your documentation folder will contain separate Markdown files for each section, named according to the keys in the `.json` file. For example:\n\n```yaml\n- `documentation /`\n    - `docs /`\n        - `changelog.md`\n        - `environment_setup.md`\n        - `contributing.md`\n        - `tutorials.json`\n```\n\nEach Markdown file will correspond to a section in your documentation and should contain the relevant content for that section.\n\nRemember to update the `.json` file whenever you add or modify sections to ensure that the documentation structure accurately reflects the content of your documentation.\n\n\n### Nested `.json` configuration for tutorials\n<hr>\nTo structure tutorials and create nested tutorials within your documentation, you can use the `.json` file to define the hierarchy and relationships between tutorials. Here's an example of how you can structure tutorials using a `.json` file:\n\n```yaml\n{\n    \"maintainers\": {\n        \"title\": \"Technical guide for Maintainers\",\n        \"children\": {\n            \"reviewing_pr\": {\n                \"title\": \"Reviewing pull requests\"\n            },\n            \"ci_workflow\": {\n                \"title\": \"CI Workflow\"\n            },\n            \"secrets_and_security\": {\n                \"title\": \"Secret Access/Management\"\n            },\n            \"deployment_guide\": {\n                \"title\": \"Deployment Guide\"\n            }\n        }\n    },\n    \"contributing\": {\n        \"title\": \"Contributing to the project\",\n        \"children\": {\n            \"adding_a_course\": {\n                \"title\": \"Adding a course\"\n            },\n            \"api_project_structure\": {\n                \"title\": \"API project structure\"\n            },\n            \"improving_documentation\": {\n                \"title\": \"Improving documentation\"\n            },\n            \"project_structure\": {\n                \"title\": \"Project structure\"\n            },\n            \"raising_issues\": {\n                \"title\": \"Raising issues\"\n            },\n            \"raising_pr\": {\n                \"title\": \"Raising pull requests\"\n            }\n        }\n    },\n    \"review\": {\n        \"title\": \"Reviewing the project\"\n    }\n}\n ```\n\nIn this example, the `.json` file represents a documentation structure with two main sections: \"Technical guide for Maintainers\" and \"Technical guide for API developers\". Each section has its own set of tutorials represented as nested objects.\n\n1. Define the main sections or categories as top-level objects within the `.json` file, such as \"maintainers\" and \"contributing\".\n\n2. Within each main section, provide a `\"title\"` key to specify the title or heading for that section. For example, \"Technical guide for Maintainers\" and \"Technical guide for API developers\".\n\n3. Add a `\"children\"` key within each main section to define the nested tutorials. Each tutorial is represented as a child object within the `\"children\"` object. Not all tutorials may have children tutorials, an example of this is the `review` tutorial. Since it has no children the program will only look for a `review.qmd` file and not a `review` folder \n\n4. For each tutorial, provide a unique key as the object's key, such as \"reviewing_pr\" and \"ci_workflow\".\n\n5. Within each tutorial object, include a `\"title\"` key to specify the title or heading for that specific tutorial.\n\nFor this example here is what the folder structure would look like assuming the root folder is `tutorials /`:\n\n```yaml\n        - tutorials/\n            - maintainers/\n                - maintainers.qmd\n                - reviewing_pr.qmd\n                - ci_workflow.qmd\n                - secrets_and_security.qmd\n                - deployment_guide.qmd\n\n            - contributing/\n                - api.md\n                - api_structure.md\n                - api_authentication_flow.qmd\n                - jwt_token_management.qmd\n                - rbac_handler_flow.qmd\n            \n            - review.qmd\n              \n            - config.json\n```\n\nIn this structure:\n\n- The `.json` configuration file is located in the `tutorials/` folder\n- The `tutorials` folder contains subfolders representing different sections or categories of tutorials.\n- Each section or category folder, such as `maintainers` and `contributing`, contains the `.qmd` files for individual tutorials.\n<!-- - Additionally, for each section or category folder, there should be an accompanying `*.md` file that serves as the entry overview, providing an overview of the tutorials within that section. For example, `maintainers.md` provides an overview of the tutorials in the \"Technical guide for Maintainers\" section. -->\n\nThe nested structure allows you to organize tutorials hierarchically, making it easier to navigate and find specific tutorials based on their topic or category.\n\nIt's important to note that the tutorial structure allows only one level of nesting. This means you can have main sections and their respective tutorials, but you cannot create further nested folders within the tutorials.\n","srcMarkdownNoYaml":"\n### Tutorials guide\n<hr>\n\nThis section provides an overview of the `config.json` files used in the JSQuarto documentation, specifically focusing on the `tutorials` folder. The `config.json` file serve as configuration files that help structure and organize the documentation, while the `tutorials` folder contains the Markdown files for various tutorials.\n\n### The `tutorials` Folder\n<hr>\n\nThe `tutorials` folder within the documentation directory is dedicated to hosting tutorials on various topics related to the JSQuarto platform. This folder contains a collection of Markdown files, each representing an individual tutorial.\n\nMarkdown is a lightweight markup language that allows for easy formatting and structuring of text, making it ideal for creating tutorials. Markdown files provide a simple yet powerful way to document step-by-step instructions, code examples, explanations, and other relevant information.\n\nThe `tutorials` folder can be organized into subfolders to further categorize and group related tutorials. This helps users easily locate and access the tutorials they need based on their specific interests or requirements.\n\nBy structuring tutorials within the `tutorials` folder using Markdown, contributors can contribute new tutorials, update existing ones, and ensure that the documentation remains comprehensive and user-friendly.\n\nOverall, the combination of `.json` files and the `tutorials` folder enables a well-organized and accessible documentation structure, allowing users to navigate and explore the JSQuarto platform documentation with ease.\n\n### Overview of `config.json` Files\n<hr>\nThe `config.json` file in the JSQuarto documentation play a crucial role in organizing and categorizing the content. This file define the structure of the documentation and provide metadata for each section, tutorial, or topic. They allow maintainers and contributors to easily navigate and manage the documentation by specifying titles, creating nested structures, and linking related topics.\n\nBy using `config.json` file, the documentation can be dynamically generated and updated based on the defined structure. This makes it easier to maintain consistency, track changes, and add new content.\n\n\n### The `.json` configuration\n<hr>\nLet's explain how this structure works by looking at the `config.json` file in the `tutorials /` folder. This file defines the structure of the tutorials section of the documentation, including the titles, descriptions links for each tutorial.\n\n```json\n{\n  \"changelog\": {\n    \"title\": \"Changelog\"\n  },\n  \"environment_setup\": {\n    \"title\": \"Environment Setup\"\n  },\n  \"contributing\": {\n    \"title\": \"Contributing\"\n  }\n}\n```\n\nIn this example, the `.json` file defines the titles and relationships of the main sections within your documentation. The sections are represented as objects, with each object having a unique key and a `\"title\"` key-value pair.\n\n1. `changelog` represents the \"Changelog\" section. The `\"title\"` key-value pair specifies the title of this section as \"Changelog.\"\n\n2. `environment_setup` represents the \"Environment Setup\" section. The `\"title\"` key-value pair specifies the title of this section as \"Environment Setup.\"\n\n3. `contributing` represents the \"Contributing\" section. The `\"title\"` key-value pair specifies the title of this section as \"Contributing.\"\n\nWith this structure, your documentation folder will contain separate Markdown files for each section, named according to the keys in the `.json` file. For example:\n\n```yaml\n- `documentation /`\n    - `docs /`\n        - `changelog.md`\n        - `environment_setup.md`\n        - `contributing.md`\n        - `tutorials.json`\n```\n\nEach Markdown file will correspond to a section in your documentation and should contain the relevant content for that section.\n\nRemember to update the `.json` file whenever you add or modify sections to ensure that the documentation structure accurately reflects the content of your documentation.\n\n\n### Nested `.json` configuration for tutorials\n<hr>\nTo structure tutorials and create nested tutorials within your documentation, you can use the `.json` file to define the hierarchy and relationships between tutorials. Here's an example of how you can structure tutorials using a `.json` file:\n\n```yaml\n{\n    \"maintainers\": {\n        \"title\": \"Technical guide for Maintainers\",\n        \"children\": {\n            \"reviewing_pr\": {\n                \"title\": \"Reviewing pull requests\"\n            },\n            \"ci_workflow\": {\n                \"title\": \"CI Workflow\"\n            },\n            \"secrets_and_security\": {\n                \"title\": \"Secret Access/Management\"\n            },\n            \"deployment_guide\": {\n                \"title\": \"Deployment Guide\"\n            }\n        }\n    },\n    \"contributing\": {\n        \"title\": \"Contributing to the project\",\n        \"children\": {\n            \"adding_a_course\": {\n                \"title\": \"Adding a course\"\n            },\n            \"api_project_structure\": {\n                \"title\": \"API project structure\"\n            },\n            \"improving_documentation\": {\n                \"title\": \"Improving documentation\"\n            },\n            \"project_structure\": {\n                \"title\": \"Project structure\"\n            },\n            \"raising_issues\": {\n                \"title\": \"Raising issues\"\n            },\n            \"raising_pr\": {\n                \"title\": \"Raising pull requests\"\n            }\n        }\n    },\n    \"review\": {\n        \"title\": \"Reviewing the project\"\n    }\n}\n ```\n\nIn this example, the `.json` file represents a documentation structure with two main sections: \"Technical guide for Maintainers\" and \"Technical guide for API developers\". Each section has its own set of tutorials represented as nested objects.\n\n1. Define the main sections or categories as top-level objects within the `.json` file, such as \"maintainers\" and \"contributing\".\n\n2. Within each main section, provide a `\"title\"` key to specify the title or heading for that section. For example, \"Technical guide for Maintainers\" and \"Technical guide for API developers\".\n\n3. Add a `\"children\"` key within each main section to define the nested tutorials. Each tutorial is represented as a child object within the `\"children\"` object. Not all tutorials may have children tutorials, an example of this is the `review` tutorial. Since it has no children the program will only look for a `review.qmd` file and not a `review` folder \n\n4. For each tutorial, provide a unique key as the object's key, such as \"reviewing_pr\" and \"ci_workflow\".\n\n5. Within each tutorial object, include a `\"title\"` key to specify the title or heading for that specific tutorial.\n\nFor this example here is what the folder structure would look like assuming the root folder is `tutorials /`:\n\n```yaml\n        - tutorials/\n            - maintainers/\n                - maintainers.qmd\n                - reviewing_pr.qmd\n                - ci_workflow.qmd\n                - secrets_and_security.qmd\n                - deployment_guide.qmd\n\n            - contributing/\n                - api.md\n                - api_structure.md\n                - api_authentication_flow.qmd\n                - jwt_token_management.qmd\n                - rbac_handler_flow.qmd\n            \n            - review.qmd\n              \n            - config.json\n```\n\nIn this structure:\n\n- The `.json` configuration file is located in the `tutorials/` folder\n- The `tutorials` folder contains subfolders representing different sections or categories of tutorials.\n- Each section or category folder, such as `maintainers` and `contributing`, contains the `.qmd` files for individual tutorials.\n<!-- - Additionally, for each section or category folder, there should be an accompanying `*.md` file that serves as the entry overview, providing an overview of the tutorials within that section. For example, `maintainers.md` provides an overview of the tutorials in the \"Technical guide for Maintainers\" section. -->\n\nThe nested structure allows you to organize tutorials hierarchically, making it easier to navigate and find specific tutorials based on their topic or category.\n\nIt's important to note that the tutorial structure allows only one level of nesting. This means you can have main sections and their respective tutorials, but you cannot create further nested folders within the tutorials.\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"number-sections":false,"output-file":"tutorial_overview.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.52","babelquarto":{"languagecodes":[{"name":"en","text":"Version in en"},{"name":"ar","text":"Version in ar"}],"mainlanguage":"en","languages":["ar"]},"title-en":"Title in en","description-en":"Description in en","author-en":"Author in en","title-ar":"Title in ar","description-ar":"Description in ar","author-ar":"Author in ar","theme":"cosmo","highlight":"github","title":"Tutorial overview"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}