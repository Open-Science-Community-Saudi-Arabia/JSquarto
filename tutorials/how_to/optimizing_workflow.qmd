### Understanding Source Files
In the context of JSquarto, source files are pivotal components containing the comments that JSquarto utilizes to generate comprehensive documentation. These files can be authored in various languages supported by JSquarto, such as JavaScript, TypeScript, and JSX. By default, JSquarto scrutinizes the `/source_files` directory within your project structure to locate these crucial files. However, you possess the flexibility to designate an alternative directory through the `--source` option.

Specifying Source Files Location
To specify a custom directory containing your source files, employ the `--source` option when executing JSquarto commands. Here's an example demonstrating its usage:

    ```bash
    npm run build --source /path/to/your/source/files
    ```

3. `languages`: Specifies the languages to be supported in the documentation. This argument enables you to generate documentation in multiple languages, catering to a diverse user base. For example, `languages=en,fr,es` specifies English, French, and Spanish as the supported languages.

4. `include_localized_versions`: Specifies whether to include localized versions of the generated documentation. For example, if specified, JSquarto will generate seperate files for each specified language. 


### Usage
To utilize these custom CLI arguments, simply append them to the JSquarto command when executing the tool. For example:

To specify the source files directory:
```bash
npm run doc:generate --source=/path/to/your/source/files 
```

To specify the tutorial files directory:
```bash
npm run doc:generate --tutorial=/path/to/your/tutorial/files
```

To specify the supported languages:
```bash
npm run doc:generate languages=en,fr,es
```

To include localized versions of the generated documentation:
```bash
npm run doc:generate include_localized_versions languages=en,fr,es
```

Note: If you intend to `include_localized_versions`, you must also specify the `languages` argument to indicate the supported languages for the documentation.

By leveraging these custom CLI arguments, you can tailor the documentation generation process to meet your specific needs and preferences, thereby enhancing the quality and usability of your documentation output.


### Leveraging TypeScript in Source Files
When utilizing TypeScript within your project, it's advisable to transpile your TypeScript source files into JavaScript before initiating the JSquarto process. This recommendation stems from the fact that JSquarto lacks intrinsic support for TypeScript syntax. Once you've transpiled your TypeScript files into JavaScript, you can seamlessly execute JSquarto on the resultant JavaScript files to generate comprehensive documentation.

Integrating TypeScript Transpilation
Prior to executing JSquarto, ensure to transpile your TypeScript source files into JavaScript using your preferred transpiler, such as TypeScript Compiler (tsc). This step ensures compatibility with JSquarto's documentation generation process, thereby facilitating a smooth and efficient 