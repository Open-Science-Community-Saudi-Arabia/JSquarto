###تحسين التوثيق

## تحسين التوثيق باستخدام JSDoc

### مقدمة

فالتوثيق الفعال أمر بالغ الأهمية للمحافظة على علاقة مشتركة واضحة ومفهومة. إحدى الأدوات القوية لتعزيز التوثيق في الكود الخاص بك هي JSDoc. JSDoc هي لغة ترميز تسمح لك بالتعليق على التعليمات البرمجية الخاصة بك مع تعليقات منظمة، مما يتيح التوليد التلقائي للوثائق. في هذا الدليل، سوف نستكشف استخدامات JSDoc وكيف يمكن تحسين توثيق مشروعك.

### استخدام JSDoc للوثائق الوراثية

أحد الاستخدامات الأساسية لـ JSDoc هو توليد التوثيق مباشرة من الكود الخاص بك. من خلال إضافة تعليقات JSDoc إلى الدوال والصفوف والمتغيرات الخاصة بك، يمكنك توفير معلومات أساسية يتم استخراجها تلقائياً وتحويلها إلى وثائق شاملة.

لاستخدام JSDoc لتوليد الوثائق، قم باتباع الخطوات التالية:

1. تعليقات الترميز: أضف تعليقات JSDoc مباشرة فوق عناصر التعليمات البرمجية التي تريد توثيقها. استخدام /\*_ ... _/ بناء الجملة للإشارة إلى كتلة تعليقات JSDoc .

2. وظائف التوثيق: استخدام وسوم JSDoc لوصف معلمات الدالة، قيم الإرجاع، ومعلومات إضافية. العلامات مثل @param و @returns و @description شائعة الاستخدام لهذا الغرض. العلامات المخصصة المهمة الأخرى هي @category و @subcategory، هذه العلامات تساعد على هيكلة الوثائق التي تم إنشاؤها في فصول. وستكون جميع الوحدات تحت `فئة فرعية` تحت فصل واحد، وسيتطابق اسم الفصل مع الاسم المعين لـ `الفئة الفرعية`. 
   الفكرة الرئيسية حول الفئتين @category و @subcategory هي السماح للفصول المتداخلة على سبيل المثال يمكن أن يحتوي الفصل الأول ألف على فصول فرعية أخرى (الفصل ألف (أ). 
   لاحظ أن هذا هو مستويين فقط من التعقيد، حيث أن الفصل ألف هو الفئة @والفئة الفرعية @@ ستكون هي الفصول الأخرى. نعتزم في البداية تنفيذ مستويين من الفصول المتداخلة، ولكن هذا في وقت كتابة هذا الربع لا يسمح إلا لمستوى واحد من التعبيد (١).

3. فئات التوثيق: بالنسبة للصفوف الدراسية، استخدم تعليقات JSDoc لتوفير الأوصاف، وخصائص الصف المستندي، وطرائق فصل المستند. العلامات مثل @clas، @propers، و @method شائعة الاستخدام في هذا السياق.

4. تشغيل توليد JSDoc : استخدام أداة مولد JSDoc ، مثل JSDoc نفسه أو أدوات شعبية أخرى مثل TypeDoc أو JSDoc3, لتحليل الكود الخاص بك وإنشاء إخراج الوثائق. تكوين المولد لاستهداف تنسيق المخرج المطلوب، مثل HTML أو Markdown.

5. مراجعة وتحديث: مراجعة الوثائق التي تم إنشاؤها والتأكد من أنها تمثل الرمز الخاص بك بدقة. تحديث تعليقات JSDoc حسب الحاجة لتقديم تفسيرات أو معلومات إضافية أوضح.

لمزيد من المعلومات حول استخدام JSDoc لتوليد الوثائق، انظر [وثائق JSDoc ](https://jsdoc.app/) أو [Getting بدأ باستخدام JSDoc](https://jsdoc.app/about-getting-started.html).

### استخدام JSDoc لكتابة الوثائق

المواد المرجعية: يمكن استخدام تعليقات JSDoc لتوفير معلومات إضافية في المواد المرجعية. كما يمكن استخدام JSDoc بما يتجاوز إصدار الوثائق الرمزية نظام بناء الجملة والعلامة المرن لديه يجعله أداة قيمة لكتابة جوانب أخرى من وثائق مشروعك، مثل الدروس والأدلة والمواد المرجعية.

لاستخدام JSDoc لكتابة الوثائق، يرجى النظر في النُهج التالية:

1. الدروس والإرشاد: استخدام تعليقات JSDoc لكتابة دروس ودلائل خطوة بخطوة داخل الكود الخاص بك. عن طريق تضمين المحتوى التعليمي في تعليقات JSDoc ، يمكنك الحفاظ على ارتباط الوثائق بشكل وثيق مع الكود ذي الصلة، يجعل من الأسهل على المطورين متابعة المفاهيم وفهمها.

2. أمثلة مضمنة: استخدم تعليقات JSDoc لتضمينها أمثلة على الرموز المضمنة التي توضح استخدام الدوال أو الصفوف أو الوحدات. ويمكن استخدام هذه الأمثلة كمادة تعليمية وكمرجع سريع للمطورين.

3. مثل شرح أنماط التصميم، أو تحديد أفضل الممارسات، أو توضيح المفاهيم المعقدة. وسوم Leverage JSDoc مثل @example أو @see لربط الموارد أو أمثلة التعليمات البرمجية ذات الصلة.

4. التكامل مع Markdown: JSDoc يدعم Markdown ضمن التعليقات، مما يسمح لك بدمج النصوص المنسقة والعناوين والقوائم وغيرها من ميزات Markdown في وثائقك. هذا يمكّنك من إنشاء محتوى أكثر جاذبية بصرياً وتنظيماً في تعليقات JSDoc الخاصة بك.

### تحسين وثائق JSQuarto باستخدام JSDoc


ولم تكتمل بعد وثائق JSQuarto. وهناك عدة مجالات يمكن تحسينها، بما في ذلك:

- إيضاحات أكثر تفصيلا لهيكل مشروع JSQuarto ومشروع الشفرة
- معلومات إضافية عن كيفية المساهمة في المشروع
- تنفيذ JSQuarto كأداة للمبادرة القطرية 
- معلومات إضافية عن كيفية الحفاظ على مشروع JSQuarto
- معلومات إضافية عن كيفية نشر مشروع JSQuarto
- خريطة الطريق للمشروع والخطط المستقبلية

لتحسين وثائق JSQuarto ، يمكنك استخدام JSDoc لإضافة وثائق إضافية مباشرة داخل المركز البرمجي. هذا سيمكنك من تقديم إيضاحات أكثر تفصيلا للشفرة وهيكل المشروع، بالإضافة إلى معلومات إضافية عن كيفية المساهمة في المشروع، كيفية استخدام واجهة برمجة تطبيقات JSQuarto ، وكيفية صيانة المشروع ونشره. في وقت كتابة هذا، تم بناء الوثائق مع حزم أخرى لتحسين واجهة المستخدم، أحدها [Better-docs](https://github.com/SoftwareBrothers/better-docs).

### دليل الدروس

يقدم هذا القسم لمحة عامة عن ملفات `config.json` المستخدمة في وثائق JSQuarto، مع التركيز تحديداً على مجلد `tutorials`. ملف `config.json' يعمل كملفات تكوين تساعد على هيكلة وتنظيم الوثائق، في حين أن مجلد `الدروس` يحتوي على ملفات Markdown لمختلف الدروس.

#### مجلد `الدروس التعليمية`

مجلد "الدروس" داخل دليل التوثيق مكرس لاستضافة دروس حول مختلف المواضيع ذات الصلة بمنصة JSQuarto. يحتوي هذا المجلد على مجموعة من ملفات Markdown، يمثل كل منها درسا فرديا.

Markdown هي لغة علامة خفيفة الوزن تسمح بسهولة تنسيق وبنية النص، مما يجعلها مثالية لإنشاء دروس. توفر ملفات Markdown طريقة بسيطة ولكنها قوية لتوثيق التعليمات خطوة بخطوة، والأمثلة البرمجية، والتفسيرات وغيرها من المعلومات ذات الصلة.

يمكن تنظيم مجلد "الدروس" في مجلدات فرعية لزيادة تصنيف ودروس ذات صلة بالمجموعة. وهذا يساعد المستخدمين على تحديد مواقع الدروس التي يحتاجونها بسهولة والوصول إليها بناء على اهتماماتهم أو متطلباتهم المحددة.

من خلال هيكلة الدروس داخل مجلد "الدروس" باستخدام Markdown، يمكن للمساهمين المساهمة بدروس جديدة، تحديث الوثائق الموجودة، وضمان أن تظل الوثائق شاملة وسهلة الاستعمال.

ملفات son` ومجلد "الدروس التعليمية" يمكنان من بنية وثائق منظمة تنظيماً جيداً ويمكن الوصول إليها، مما يسمح للمستخدمين بالتنقل واستكشاف وثائق منصة JSQuarto بسهولة.

#### نظرة عامة على ملفات `config.json`

يؤدي ملف `config.json' في وثائق JSQuarto دورا حاسما في تنظيم وتصنيف المحتوى. يحدد هذا الملف هيكل الوثائق ويوفر بيانات فوقية لكل قسم أو برنامج تعليمي أو موضوع. فهي تسمح للقائمين على الصيانة والمساهمين بالتنقل في الوثائق وإدارتها بسهولة عن طريق تحديد العناوين وإنشاء هياكل متداخلة وربط المواضيع ذات الصلة.

باستخدام ملف `config.json' ، يمكن إنشاء الوثائق وتحديثها ديناميكيا استنادا إلى الهيكل المحدد. وهذا يجعل من الأسهل الحفاظ على الاتساق، وتتبع التغييرات، وإضافة محتوى جديد.


#### تكوين `.json`
لنشرح كيف تعمل هذه البنية من خلال النظر إلى ملف `config.json` في مجلد `tutorials /`. يحدد هذا الملف هيكل قسم الدروس في الوثائق، بما في ذلك العناوين، وصلات الوصف لكل دورة تعليمية.

```json
{
  "سجل التغييرات": {
    "العنوان: "التغيير"
  },
  "environment_setup": {
    "العنوان": "إعداد البيئة"
  },
  "المساهمة": {
    "العنوان": "المساهمة"
  }
}
```

في هذا المثال ، يحدد ملف 'json' عناوين وعلاقات الأقسام الرئيسية في وثائقك. الأقسام ممثلة ككائنات، مع كل كائن له مفتاح فريد و 'title"` زوج قيم مفتاح.
1. "سجل التغييرات" يمثل قسم "التغييرات". يحدد زوج القيمة الرئيسية "title" عنوان هذا القسم بأنه "التغيير".

2. "Environ_setup" يمثل قسم "إعداد البيئة". يحدد زوج القيمة الرئيسية "title" عنوان هذا القسم بأنه "إعداد البيئة".

3. يمثل "المساهمة" قسم "المساهمة". يحدد زوج القيمة الرئيسية "title" عنوان هذا القسم بأنه "المساهمة".

مع هذا الهيكل، سيتضمن مجلد الوثائق الخاص بك ملفات ماركداون منفصلة لكل قسم، اسمها وفقا للمفاتيح في ملف `.json'. وعلى سبيل المثال:

“يامل
- `الوثائق/`
    - `docs /`
        - `changelog.md`
        - `environment_setup.md`
        - `contributing.md`
        - `tutorials.json`
```

كل ملف Markdown سوف يتطابق مع قسم في وثائقك ويجب أن يحتوي على المحتوى ذي الصلة لذلك القسم.

هذا الهيكل المبسط يسمح لك بتنظيم وثائقك في أقسام متميزة، يجعل من الأسهل على القراء تحديد المواقع والوصول إلى المواضيع المحددة التي يحتاجون إليها. يوفر طريقة واضحة وموجزة لتمثيل الأقسام الرئيسية من وثائقك دون الحاجة إلى دروس متداخلة أو تسلسل هرمي معقد.

تذكر أن تقوم بتحديث ملف '.json' كلما قمت بإضافة أو تعديل الأقسام للتأكد من أن هيكل التوثيق يعكس بدقة محتوى وثائقك.

باتباع هذا الهيكل، يمكنك الحفاظ على مستودع وثائق جيد التنظيم وسهل التصفح.

#### إعدادات `.json` المتداخلة للدورات التعليمية
لهيكلة الدروس وإنشاء دروس متداخلة داخل وثائقك، يمكنك استخدام ملف '.json' لتحديد التسلسل الهرمي والعلاقات بين الدروس. إليك مثال على كيفية هيكلة الدروس باستخدام ملف `.json`:

“يامل
{
    "المشرفين": {
        "العنوان": "دليل تقني للقائمين"،
        "الأطفال": {
            "reviewing_pr": {
                "title": "استعراض طلبات السحب"
            },
            "ci_workflow": {
                "title": "CI Workflow "
            },
            "الاو<unk> سراير_and_security": {
                العنوان : "الوصول السري/الإدارة السرية"
            },
            "نشر الدليل": {
                "عنوان": "دليل النشر"
            }
        }
    },
    "المساهمة": {
        "title": "المساهمة في المشروع"،
        "الأطفال": {
            "adding_a_course": {
                "title": "إضافة دورة"
            },
            "api_project_structure": {
                "title": "بنية مشروع API
            },
            "Improving_documentation": {
                العنوان : "تحسين التوثيق"
            },
            "project_structure": {
                "عنوان": "بنية المشروع"
            },
            "raising_issues": {
                العنوان: "إثارة المشاكل"
            },
            "raising_pr": {
                "عنوان": "رفع طلبات الجذب"
            }
        }
    },
    "عرض": {
        "title": "استعراض المشروع"
    }
}
 ```

وفي هذا المثال، يمثل ملف `json` هيكلا للتوثيق يتألف من قسمين رئيسيين: "الدليل التقني للمتعينين" و"الدليل التقني لمطوري API". لكل قسم مجموعته الخاصة من الدروس التي تمثل ككائنات متداخلة.

1. تعريف الأقسام أو الفئات الرئيسية على أنها الكائنات ذات المستوى الأعلى داخل ملف `json'، مثل "المشرفين" و "المساهمة".

2. ضمن كل قسم رئيسي، قدم مفتاح "عنوان" لتحديد عنوان أو عنوان ذلك القسم. () على سبيل المثال، "الدليل التقني للقائمين" و"الدليل التقني لمطوري API".

3. إضافة مفتاح 'الأطفال' داخل كل قسم رئيسي لتحديد الدروس المتداخلة. يتم تمثيل كل برنامج تعليمي ككائن ثانوي داخل كائن `الأطفال`. وقد لا تحتوي جميع الدروس على دروس للأطفال، ومن الأمثلة على ذلك دروس "مراجعة". بما أنه ليس لديه أطفال فإن البرنامج سيبحث فقط عن ملف "review.qmd" وليس مجلد "عرض" 

4. لكل برنامج تعليمي، قم بتوفير مفتاح فريد كمفتاح الكائن، مثل "reviewing_pr" و "ci_workflow".

5. ضمن كل كائن تعليمي، قم بإدراج مفتاح "title" لتحديد العنوان أو العنوان لذلك البرنامج التعليمي المحدد.

على هذا المثال هنا ما سيبدو عليه هيكل المجلد بافتراض أن المجلد الجذري هو `دروس/`:

“يامل
        - دروس/دروس
            - المشرفون/
                - المشرفون
                - الاستعراض_pr.qmd
                - ci_workflow.qmd
                - الاداة <unk> سراير_and_security.qmd
                - حولية

            - المساهمة/
                - api.md
                - api_structure.md
                - api_authentication_flow.qmd
                - jwt_token_management.qmd
                - rbac_handler_flow.qmd
            
            - review.qmd
              
            - config.json
```

وفي هذا الهيكل:

- ملف التكوين 'json' موجود في المجلد 'دروس التعليمية'
- يحتوي مجلد "الدروس" على مجلدات فرعية تمثل أقسام أو فئات مختلفة من الدروس.
- كل قسم أو مجلد فئة، مثل 'المشرفين` و 'المساهمة`، يحتوي على ملفات '.qmd' لدروس فردية.
<!-- - بالإضافة إلى ذلك، لكل قسم أو مجلد فئة، ينبغي أن يكون هناك `*. فعلى سبيل المثال، يقدم `Mainers.md` لمحة عامة عن الدروس في قسم "الدليل التقني للقائمين". -->

الهيكل المتداخل يسمح لك بتنظيم الدروس هرمياً ، مما يجعل من الأسهل التنقل والبحث عن دروس محددة استناداً إلى موضوعها أو فئتها.

من المهم ملاحظة أن بنية البرنامج التعليمي لا تسمح إلا بمستوى واحد من التعش. هذا يعني أنه يمكنك الحصول على الأقسام الرئيسية ودروسها، ولكن لا يمكنك إنشاء المزيد من المجلدات المتداخلة داخل الدروس.

md` ملفات نظرة عامة، يمكنك بسهولة تحديد التسلسل الهرمي والعلاقات بين الدروس، السماح لك بإنشاء دروس متداخلة وتنظيم وثائقك بطريقة منطقية ومنظمة.
