###سير العمل

### سير العمل {#sec-workflows}
هناك مختلف سير العمل التي يمكن اعتمادها لتحسين عملية توليد الوثائق باستخدام JSquarto.

1. توليد دوك
2. توليد دوك مع نقل يدوي
3. توليد Doc مع ترجمة crowdin

### توليد دوك
وينطوي سير العمل هذا على توليد الوثائق بلغة واحدة. وهذه العملية مباشرة وتنطوي على تنفيذ JSquarto على ملفات المصدر لتوليد وثائق شاملة باللغة المحددة. ويعد تدفق العمل هذا مثاليا بالنسبة للمشاريع التي تستهدف جمهورا لغويا محددا وتسعى إلى تبسيط عملية إعداد الوثائق.

#### ستابس
1. للقيام بذلك، ببساطة تنفيذ أمر JSquarto مع الحجج المطلوبة ل CLI، مثل '--source' و 'languages' لتحديد دليل الملفات المصدر واللغات المدعومة، على التوالي. وعلى سبيل المثال:
   
    “`باش
        npm تشغيل doc:generate --source=/path/to/your/source/files 
    ```

### توليد دوك مع ترجمة يدوية
من أجل الترجمة اليدوية للوثائق، يمكنك إنتاج الوثائق بلغات متعددة ثم ترجمة المحتوى يدوياً إلى اللغات المرغوبة. لسير العمل هذا، نستخدم [babelquarto](https://docs.ropensci.org/babelquarto/) الذي يساعد على معاينة الوثائق بلغات متعددة. على الرغم من أن هذا لا يترجم المحتوى، فإنه يوفر معاينة للوثائق باللغات المحددة، مما يتيح لك ترجمة المحتوى يدوياً.

#### الخطوات
1. توليد الوثائق بلغات متعددة باستخدام JSquarto مع حجة "اللغات" لتحديد اللغات المعتمدة. وعلى سبيل المثال:

    “`باش
        npm تشغيل doc:generate languages=en,fr,es include_localized_versions --source=/path/to/your/source/files
    ```
ملاحظة: تأكد من إدراج حجة 'include_localized_versions` لإنتاج نسخ من الوثائق باللغات المحددة. إذا لم تكن مشمولة، سيتم إنشاء وثائق اللغة الافتراضية فقط. ولكن سيتم إضافة تكوين اللغات إلى ملف التكوين (_quarto.yml) فقط.

2. ترجمة المحتوى يدويا في ملفات الوثائق التي تم إنشاؤها لكل لغة. يمكنك استخدام أدوات مثل ترجمة جوجل أو خدمات الترجمة المهنية لتسهيل عملية الترجمة.

3. قم بتحميل RStudio وتثبيت حزمة 'babelquarto' من CRAN. يتم استخدام هذه الحزمة لمعاينة الوثائق بلغات متعددة. يمكنك تثبيت الحزمة باستخدام الأمر التالي:
    
    "`R
        install.packages('babelquarto', repos = c('https://ropensci.r-universe.dev', 'https://cloud.r-project.org'))
    ```

4. افتح مجلد دوك الذي تم إنشاؤه في RStudio، انتقل إلى وحدة التحكم وتعيين دليل العمل إلى مجلد doc
   
    "`R
        project_dir <- "/home/richie/Desktop/repos/oscsa/JSquarto/docs"
    ```

5. معاينة الوثائق بلغات متعددة باستخدام حزمة 'babelquarto'. وعلى سبيل المثال، لتنفيذ الأمر التالي من أجل معاينة الوثائق باللغات الانكليزية والفرنسية والإسبانية:
    
    "`R
       babelquarto::render_book(file.path(parent_dir, project_dir))
    ```
6. وحتى وقت كتابة هذا التقرير، كانت هناك مسائل طفيفة تتعلق بالتنقل في الوثائق المعاد النظر فيها بلغات مختلفة. لإصلاح هذا مؤقتاً، قم بتشغيل 
    
    “`باش
        npm تشغيل إصلاح: جميع اللغات=en,fr,es
    ```

    ملاحظة: البرنامج النصي "إصلاح:all" هو برنامج نصي مخصص يصلح مشاكل التنقل في الوثائق المعاينة. يستخدم هذا البرنامج النصي لتحديث روابط التنقل في الوثائق المعاينة لتمكين التنقل السلس بين اللغات المختلفة. واللغات المحددة في النص ينبغي أن تتطابق مع اللغات المحددة في حجة "اللغات" أثناء عملية إعداد الوثائق.

7. يمكنك الانتقال إلى دليل `/docs/_book` لعرض الوثائق المعاينة بلغات متعددة. يمكنك من التحقق من الترجمات وضمان دقة وجودة الوثائق.



### توليد دوك مع ترجمة الحشود
للترجمة الآلية للوثائق، يمكنك الاستفادة من منصة كرودن لتسهيل عملية الترجمة. كراودِن هو منصة إدارة الترجمة القائمة على السحابة والتي تمكنك من أتمتة ترجمة المحتوى إلى لغات متعددة. من خلال دمج كراودِن مع JSquarto، يمكنك تبسيط عملية الترجمة وإنشاء وثائق شاملة بلغات مختلفة بكفاءة.

#### الخطوات
1. توليد الوثائق بلغات متعددة باستخدام JSquarto مع حجة "اللغات" لتحديد اللغات المعتمدة. وعلى سبيل المثال:

    “`باش
        npm تشغيل doc:generate languages=en,fr,es --source=/path/to/your/source/files
    ```

    لاحظ أن حجة "include_localized_versions" ليست مطلوبة لسير العمل هذا، لأن كراودِن سوف يتعامل مع عملية الترجمة. وإنشاء ملفات مختلفة لكل لغة.

2. دمج كراودِن مع JSquarto لأتمتة عملية الترجمة. لدمج كراودن، تحتاج إلى إنشاء مشروع كراودِن وتكوين إعدادات المشروع لتمكين الترجمة التلقائية للوثائق. om/github-integration/#:~:text=فتح%20الخاص بك%20project%20and%20go%20to%20%20INtegrt، قرص أسفل%20list%20to%20integrate%20عن طريق%20الخاص بك%20GitHub%20a) للحصول على تعليمات مفصلة بشأن إعداد مشروع وتكوين إعدادات الترجمة.
في كراودين، يمكنك إعداد كيفية تسمية الملفات المترجمة، والتأكد من أنها تتبع تنسيق `original_file_name.locale.extension` على سبيل المثال `index.en.qmd`، `index.fr.qmd`، `index.es.qmd`

3. بمجرد تكوين إعدادات مشروع Crowdin ، يمكنك المضي قدما في تقديم الوثائق بلغات متعددة باستخدام حزمة 'babelquarto'. هذه الخطوة تمكنك من معاينة الوثائق بلغات مختلفة قبل بدء عملية الترجمة. يمكنك استخدام حزمة 'babelquarto' لمعاينة الوثائق بلغات متعددة، كما هو مبين في تدفق العمل السابق. للقيام بهذا فتح مجلد doc الذي تم إنشاؤه في RStudio، انتقل إلى وحدة التحكم وتعيين دليل العمل إلى مجلد doc
    
    "`R
        project_dir <- "/home/richie/Desktop/repos/oscsa/JSquarto/docs"
    ```

    معاينة الوثائق بلغات متعددة باستخدام حزمة 'babelquarto'. وعلى سبيل المثال، لتنفيذ الأمر التالي من أجل معاينة الوثائق باللغات الانكليزية والفرنسية والإسبانية:
    
    "`R
       babelquarto::render_book(file.path(parent_dir, project_dir))
    ```

4. بعد تقديم الكتاب، سيتم إنشاء ملفات html وتعيينها في دليل `/docs/_book'. يمكنك بعد ذلك خدمة الكتاب باستخدام أي خادم ثابت مثل 'http-server' أو 'live-server' لمعاينة الوثائق بلغات متعددة. بدلاً من ذلك، يمكنك تشغيل الأمر التالي لخدمة الكتاب:
    
    “`باش
        npm تشغيل الخدمة
    ```

    بعد تقديم الكتاب، يمكنك الانتقال إلى عنوان URL المحدد لعرض الوثائق بلغات متعددة. في بعض الحالات قد تلاحظ أن روابط التنقل لا تعمل كما هو متوقع. لإصلاح هذا، قم بتشغيل الأمر التالي:
    
    “`باش
        npm تشغيل إصلاح: جميع اللغات=en,fr,es
    ```

يستخدم سير العمل هذا JSquarto لتوليد الوثائق، و Crowdin لبدء عملية الترجمة التي تنشئ الملفات المترجمة باللغات المحددة، أخيرا حزمة 'babelquarto' لمعاينة الوثائق بلغات متعددة. 



